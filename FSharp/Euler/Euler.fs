namespace Euler

open System

[<AutoOpen>]
module Problems =

    (*  
        If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
        The sum of these multiples is 23.
        Find the sum of all the multiples of 3 or 5 below 1000.
    *)

    let problem1 lst =
        let checkMult3and5 number =
            match number % 3, number % 5 with
                | 0, 0 | 0, _ | _, 0 -> true
                | _ -> false
        lst 
            |> List.filter (fun elem -> checkMult3and5 elem)
            |> List.sum

    let problem1' lst =
        let checkMult3and5 =
            function
                | 0, 0 | 0, _ | _, 0 -> true
                | _ -> false
        lst 
            |> List.filter (fun elem -> checkMult3and5 (elem%3, elem%5))
            |> List.sum

    let problem1'' lst =
        let checkMult3and5 number =
            if (number % 3 = 0 || number % 5 = 0) then
                true
            else
                false
        lst 
            |> List.filter (fun elem -> checkMult3and5 elem)
            |> List.sum

    (*
        Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        By starting with 1 and 2, the first 10 terms will be:
        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
        find the sum of the even-valued terms.
    *)
    
    let problem2 () =
            Seq.unfold (fun (a, b)  -> Some(a + b, (b, a + b))) (0I, 1I)
            |> Seq.takeWhile (fun elem -> elem < 4000000I)
            |> Seq.filter (fun elem -> elem % 2I = 0I)
            |> Seq.sum

        
    (*
        The prime factors of 13195 are 5, 7, 13 and 29.

        What is the largest prime factor of the number 600851475143 ?
    *)

    type FactorTree =
        | Leaf of int64
        | Branch of int64 * FactorTree * FactorTree

    let (|Even|Odd|) (number, divisor) =
        match number % divisor with
            | 0L -> Even
            | _ -> Odd

    let rec findDivended number divisor =
        match (number, divisor) with
            | Even -> let quotient = number / divisor
                      quotient, divisor
            | Odd ->  findDivended number (divisor + 1L)     
    
    let rec buildUpFactorTree tree =
        match tree with
            | Leaf number -> let quotient, divisor = findDivended number 2L
                             match quotient with
                                | 1L -> tree
                                | _ -> buildUpFactorTree (Branch (number, Leaf quotient, Leaf divisor))
            | Branch (value, left, right) -> Branch(value, buildUpFactorTree left, buildUpFactorTree right)


    let rec evaluate tree biggestSoFar =
        match tree with
            | Leaf number -> if number > biggestSoFar then
                                number
                             else
                                biggestSoFar
            | Branch (value, left, right) -> let biggestLeft = evaluate left biggestSoFar
                                             let biggestRight = evaluate right biggestSoFar
                                             if (biggestLeft > biggestRight) then
                                                biggestLeft
                                             else
                                                biggestRight
                                             
    let problem3 number =
        let tree = buildUpFactorTree (Leaf number)
        evaluate tree 1L

    let rec maxFactor max min =
        if max = min then
            max
        else
            let isDivisible = max % min = 0L
            let nextMax = if isDivisible then max / min else max
            let nextMin = if isDivisible then min else min + 1L
            maxFactor nextMax nextMin

    let problem3' number =
        maxFactor number 2L

    (*
        A palindromic number reads the same both ways. The largest palindrome 
        made from the product of two 2-digit numbers is 9009 = 91 × 99.

        Find the largest palindrome made from the product of two 3-digit numbers.
    *)
 
    let isPalindrome number =
        let arr = number.ToString().ToCharArray()
        arr = Array.rev arr
 
    let problem4 () =
        let range = List.rev [100..999]
 
        let rec calculate largest left right =
            match left, right with
                | [], [] | _, [] -> largest
                | [], y::ys -> calculate largest range ys
                | x::xs, y::ys -> let res = x * y
                                  match isPalindrome res with
                                    | true -> calculate (max res largest) xs right
                                    | false -> calculate largest xs right
 
        calculate 0 range range

    (*
        2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

        What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
    *)

    let positifNumbers = Seq.unfold (fun state -> Some(state, state + 1)) 1
 
    let isDivisible number =
        let n = [1..20]
                    |> List.tryFind (fun elem -> (number % elem) > 0)
        match n with
            | Some _ -> false
            | None -> true
 
    let problem5 () =
        positifNumbers
           |> Seq.find (fun elem -> isDivisible elem)

    let problem5' () =
        let limit = sqrt 20.0
        let primes = [1.0..20.0]
                       |> List.filter (fun i -> isPrime i)
        primes
            |> List.map (fun i -> if i <= limit then
                                     floor(log (20.0) / log (i))
                                  else
                                     1.0)
            |> List.fold2 (fun state el1 el2 -> printfn "Current state %f : index %f : exponent %f" state el1 el2
                                                state * el1 ** el2) 1.0 primes


    (*
        The sum of the squares of the first ten natural numbers is,

        12 + 22 + ... + 102 = 385
        The square of the sum of the first ten natural numbers is,

        (1 + 2 + ... + 10)2 = 552 = 3025
        Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

        Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    *)

    let sumSquare range =
        range
            |> List.map (fun elem -> pown elem 2)
            |> List.sum
 
    let squareSum range =
        let sum = range
                    |> List.sum
        pown sum 2
 
    let problem6 range =
        (squareSum range) - (sumSquare range)

    (*
        By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

        What is the 10 001st prime number?
    *)
 
    let rec nextPrime number =
        if isPrime (number + 1) then
            number + 1
        else
            nextPrime (number + 1)
 
    let problem7 n =
        let primeNumbers = Seq.unfold (fun state -> Some(state, nextPrime state)) 2
        primeNumbers
            |> Seq.take n
            |> Seq.last

    (*
        The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

        73167176531330624919225119674426574742355349194934
        96983520312774506326239578318016984801869478851843
        85861560789112949495459501737958331952853208805511
        12540698747158523863050715693290963295227443043557
        66896648950445244523161731856403098711121722383113
        62229893423380308135336276614282806444486645238749
        30358907296290491560440772390713810515859307960866
        70172427121883998797908792274921901699720888093776
        65727333001053367881220235421809751254540594752243
        52584907711670556013604839586446706324415722155397
        53697817977846174064955149290862569321978468622482
        83972241375657056057490261407972968652414535100474
        82166370484403199890008895243450658541227588666881
        16427171479924442928230863465674813919123162824586
        17866458359124566529476545682848912883142607690042
        24219022671055626321111109370544217506941658960408
        07198403850962455444362981230987879927244284909188
        84580156166097919133875499200524063689912560717606
        05886116467109405077541002256983155200055935729725
        71636269561882670428252483600823257530420752963450
        Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    *)
 
    let chop (input : string) len = 
        seq { for start in 0 .. input.Length - len
                do yield input.[start..start + len - 1] }
            |> Seq.toArray
 
    let problem8 len =
        let number = "73167176531330624919225119674426574742355349194934" +
                     "96983520312774506326239578318016984801869478851843" +
                     "85861560789112949495459501737958331952853208805511" +
                     "12540698747158523863050715693290963295227443043557" +
                     "66896648950445244523161731856403098711121722383113" +
                     "62229893423380308135336276614282806444486645238749" +
                     "30358907296290491560440772390713810515859307960866" +
                     "70172427121883998797908792274921901699720888093776" +
                     "65727333001053367881220235421809751254540594752243" +
                     "52584907711670556013604839586446706324415722155397" +
                     "53697817977846174064955149290862569321978468622482" +
                     "83972241375657056057490261407972968652414535100474" +
                     "82166370484403199890008895243450658541227588666881" +
                     "16427171479924442928230863465674813919123162824586" +
                     "17866458359124566529476545682848912883142607690042" +
                     "24219022671055626321111109370544217506941658960408" +
                     "07198403850962455444362981230987879927244284909188" +
                     "84580156166097919133875499200524063689912560717606" +
                     "05886116467109405077541002256983155200055935729725" +
                     "71636269561882670428252483600823257530420752963450"
        let arr = chop number len
        arr
            |> Array.map (fun e -> e.ToCharArray()
                                    |> Array.map (Char.GetNumericValue >> int64)
                                    |> Array.reduce (fun acc i  -> acc * i))
            |> Array.max

    (*
        A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

        a2 + b2 = c2
        For example, 32 + 42 = 9 + 16 = 25 = 52.

        There exists exactly one Pythagorean triplet for which a + b + c = 1000.
        Find the product abc.
    *)

    let problem9 number =
        seq {for a in 1..number do
                for b in (a + 1)..number do
                    yield a, b}
            |> Seq.map (fun (a, b) -> a, b, 1000 - a - b)
            |> Seq.filter (fun (a, b, c) -> (pown a 2) + (pown b 2) = pown c 2)
            |> Seq.map (fun (a, b, c) -> a * b * c)
            |> Seq.last

    (*
        The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

        Find the sum of all the primes below two million.
    *)
 
    let problem10 number =
        let sum = Seq.unfold (fun state -> Some(state, state + 1L)) 1L
                        |> Seq.filter(fun n -> isPrime n)
                        |> Seq.takeWhile (fun n -> n < number)
                        |> Seq.sum
        sum

    // With Eratosthenes sieve
    let problem10' number =
        let sievebound = ((float number) - 1.0) / 2.0
        let mutable sieve = Array.init (int sievebound + 1) (fun i -> false)
        let crosslimit = ((sqrt (float number)) - 1.0) / 2.0
        printfn "Sievebound: %f | Cross limit: %f" sievebound crosslimit
        for i in 1..(int crosslimit) do
            if not sieve.[i] then
                for j in 2 * i * (i + 1)..(2 * i + 1)..(int sievebound) do
                    sieve.[j] <- true
 
        sieve
          |> Array.mapi (fun indx elem -> indx, elem)
          |> Array.filter (fun (_, e) -> not e)
          |> Array.fold (fun sum (indx, _) -> sum + (2L * (int64 indx) + 1L)) 2L

    (*
        In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

        08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
        49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
        81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
        52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
        22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
        24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
        32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
        67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
        24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
        21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
        78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
        16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
        86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
        19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
        04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
        88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
        04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
        20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
        20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
        01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
        The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

        What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
    *)

    let grid = array2D [[08; 02; 22; 97; 38; 15; 00; 40; 00; 75; 04; 05; 07; 78; 52; 12; 50; 77; 91; 08];
                    [49; 49; 99; 40; 17; 81; 18; 57; 60; 87; 17; 40; 98; 43; 69; 48; 04; 56; 62; 00];
                    [81; 49; 31; 73; 55; 79; 14; 29; 93; 71; 40; 67; 53; 88; 30; 03; 49; 13; 36; 65];
                    [52; 70; 95; 23; 04; 60; 11; 42; 69; 24; 68; 56; 01; 32; 56; 71; 37; 02; 36; 91];
                    [22; 31; 16; 71; 51; 67; 63; 89; 41; 92; 36; 54; 22; 40; 40; 28; 66; 33; 13; 80];
                    [24; 47; 32; 60; 99; 03; 45; 02; 44; 75; 33; 53; 78; 36; 84; 20; 35; 17; 12; 50];
                    [32; 98; 81; 28; 64; 23; 67; 10; 26; 38; 40; 67; 59; 54; 70; 66; 18; 38; 64; 70];
                    [67; 26; 20; 68; 02; 62; 12; 20; 95; 63; 94; 39; 63; 08; 40; 91; 66; 49; 94; 21];
                    [24; 55; 58; 05; 66; 73; 99; 26; 97; 17; 78; 78; 96; 83; 14; 88; 34; 89; 63; 72];
                    [21; 36; 23; 09; 75; 00; 76; 44; 20; 45; 35; 14; 00; 61; 33; 97; 34; 31; 33; 95];
                    [78; 17; 53; 28; 22; 75; 31; 67; 15; 94; 03; 80; 04; 62; 16; 14; 09; 53; 56; 92];
                    [16; 39; 05; 42; 96; 35; 31; 47; 55; 58; 88; 24; 00; 17; 54; 24; 36; 29; 85; 57];
                    [86; 56; 00; 48; 35; 71; 89; 07; 05; 44; 44; 37; 44; 60; 21; 58; 51; 54; 17; 58];
                    [19; 80; 81; 68; 05; 94; 47; 69; 28; 73; 92; 13; 86; 52; 17; 77; 04; 89; 55; 40];
                    [04; 52; 08; 83; 97; 35; 99; 16; 07; 97; 57; 32; 16; 26; 26; 79; 33; 27; 98; 66];
                    [88; 36; 68; 87; 57; 62; 20; 72; 03; 46; 33; 67; 46; 55; 12; 32; 63; 93; 53; 69];
                    [04; 42; 16; 73; 38; 25; 39; 11; 24; 94; 72; 18; 08; 46; 29; 32; 40; 62; 76; 36];
                    [20; 69; 36; 41; 72; 30; 23; 88; 34; 62; 99; 69; 82; 67; 59; 85; 74; 04; 36; 16];
                    [20; 73; 35; 29; 78; 31; 90; 01; 74; 31; 49; 71; 48; 86; 81; 16; 23; 57; 05; 54];
                    [01; 70; 54; 71; 83; 51; 54; 69; 16; 92; 33; 48; 61; 43; 52; 01; 89; 19; 67; 48]]
 
    let findLargestProduct (g : int[,]) =
        let columnLimit = g.GetUpperBound(0)
        let rowLimit = g.GetUpperBound(1)
        let canGoRight cc =
            columnLimit - cc >= 3
        let canGoLeft cc =
            cc - 3 >= 0
        let canGoDown cr =
            rowLimit - cr >= 3
        let canGoDownRight cc cr =
            canGoRight cc && canGoDown cr
        let canGoDownLeft cc cr =
            canGoLeft cc && canGoDown cr
        let stop cc cr =
            cc = columnLimit && cr = rowLimit
 
        let nextRowColumn cc cr =
            if cc + 1 > columnLimit && cr = rowLimit then
                cc, cr
            elif cc + 1 > columnLimit && cr < rowLimit then
                0, cr + 1
            else
                cc + 1, cr
 
        let rec walkGrid biggestProduct (column, row) =
            match stop column row with
                | false -> let r = match canGoRight column with
                                    | true -> //printfn "Scanning right column %i - row %i" column row
                                              g.[column, row] * 
                                              g.[column + 1, row] * 
                                              g.[column + 2, row] * 
                                              g.[column + 3, row]
                                    | false -> 0
                           let rd = match canGoDownRight column row with
                                    | true -> //printfn "Scanning down right column %i - row %i" column (row + 3)
                                              g.[column, row] * 
                                              g.[column + 1, row + 1] * 
                                              g.[column + 2, row + 2] * 
                                              g.[column + 3, row + 3]
                                    | false -> 0
                       
                           let ld = match canGoDownLeft column row with
                                    | true -> //printfn "Scanning down left column %i - row %i" column (row - 3)
                                              g.[column, row] * 
                                              g.[column - 1, row + 1] * 
                                              g.[column - 2, row + 2] * 
                                              g.[column - 3, row + 3]
                                    | false -> 0
                       
                           let d = match canGoDown row with
                                    | true -> //printfn "Scanning down column %i - row %i" column (row + 3)
                                              g.[column, row] * 
                                              g.[column, row + 1] * 
                                              g.[column, row + 2] * 
                                              g.[column, row + 3]
                                    | false -> 0
                       
                           let newBig = biggestProduct :: r :: rd :: ld :: [d]
                                        |> List.max
                       
                           walkGrid newBig (nextRowColumn column row)
                | true -> biggestProduct
 
        walkGrid 0 (0, 0)
 
    let problem11 () = 
        findLargestProduct grid

    (*
        The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
        We can see that 28 is the first triangle number to have over five divisors.

        What is the value of the first triangle number to have over five hundred divisors?
    *)

    let rec divisors acc number =
        let count, indx = acc
        if pown indx 2 <= number then
            if number % indx = 0L then
                divisors (count + 2L, indx + 1L) number
            else
                divisors (count, indx + 1L) number
        else
            count

    let problem12 number =
        Seq.unfold (fun (a, state) -> Some(a, (a + state, state + 1L))) (1L, 2L)
            |> Seq.skipWhile (fun elem -> divisors (2L, 2L) elem < number)
            |> Seq.take 1
            |> Seq.max